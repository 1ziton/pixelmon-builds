{"version":3,"file":"ggeditor.js","sources":["ng://@pixelmon/ggeditor/src/flow.component.ts","ng://@pixelmon/ggeditor/src/mind.component.ts","ng://@pixelmon/ggeditor/src/ggeditor.module.ts"],"sourcesContent":["/**\n * @author: giscafer ,https://github.com/giscafer\n * @date: 2019-08-14 15:47:15\n * @description: æµç¨å¾\n */\n\nimport { AfterViewInit, Component, Input, OnChanges, OnDestroy, OnInit } from '@angular/core';\nimport GGEditor, { Flow } from 'gg-editor';\nimport * as invariant_ from 'invariant';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport * as uuid from 'uuid';\nimport { FlowProps, FlowStyle } from './interface';\n\nconst invariant = invariant_;\n\n\n@Component({\n    selector: 'ggeditor-flow',\n    template: `\n    <div [id]=\"rootDomID\" class=\"ggeditor-flow-container\"></div>\n\t`,\n})\nexport class FlowEditorComponent implements OnInit, OnDestroy, OnChanges, AfterViewInit {\n    @Input() data: FlowProps;\n    @Input() style: FlowStyle = {\n        width: 500, height: 500\n    };\n    @Input() onLoadingChanged?: (any);\n    @Input() onError?: (any);\n\n    rootDomID: string;\n\n    // constructor(@Inject(ChangeDetectorRef) private changeDetector: ChangeDetectorRef) {}\n\n    protected getRootDomNode() {\n        const node = document.getElementById(this.rootDomID);\n        invariant(node, `Node '${this.rootDomID} not found!`);\n        return node;\n    }\n\n    protected getProps(): FlowProps {\n        const {\n            nodes,\n            edges\n        } = this.data;\n        return {\n            nodes,\n            edges\n        };\n    }\n\n    private isMounted(): boolean {\n        return !!this.rootDomID;\n    }\n\n    //<GGEditor>\n    //   <Flow style={{ width: 500, height: 500 }} data={data} />\n    // </GGEditor>\n\n    protected render() {\n        if (this.isMounted()) {\n            console.log(this.rootDomID)\n            const flow = React.createElement(Flow, { data: this.getProps(), style: { ...this.style } });\n            ReactDOM.render(React.createElement(GGEditor, {}, flow), this.getRootDomNode());\n        }\n    }\n\n    ngOnInit() {\n        this.rootDomID = uuid.v1();\n    }\n\n    ngOnChanges() {\n        this.render();\n    }\n\n    ngAfterViewInit() {\n        this.render();\n    }\n\n\n    ngOnDestroy() {\n    }\n\n    ngAfterContentInit() {\n        // e.on('message', message => {\n        //   this.message = message.text\n        //   this.changeDetector.detectChanges()\n        //   this.returnMessageToReactWhenReceived()\n        // })\n    }\n\n    returnMessageToReactWhenReceived() {\n        // e.emit('received', { text: 'Woohoo! Hello from Angular! ð' })\n    }\n}\n","/**\n * @author: giscafer ,https://github.com/giscafer\n * @date: 2019-08-14 15:47:15\n * @description: æç»´å¯¼å¾\n */\n\nimport { AfterViewInit, Component, Input, OnChanges, OnDestroy, OnInit } from '@angular/core';\nimport GGEditor, { Mind } from 'gg-editor';\nimport * as invariant_ from 'invariant';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport * as uuid from 'uuid';\nimport { MindProps, FlowStyle } from './interface';\n\nconst invariant = invariant_;\n\n@Component({\n    selector: 'ggeditor-mind',\n    template: `\n    <div [id]=\"rootDomID\" class=\"ggeditor-mind-container\"></div>\n\t`,\n})\nexport class MindEditorComponent implements OnInit, OnDestroy, OnChanges, AfterViewInit {\n    @Input() data: MindProps;\n    @Input() style: FlowStyle = {\n        width: 500, height: 500\n    };\n    @Input() onLoadingChanged?: (any);\n    @Input() onError?: (any);\n\n    rootDomID: string;\n\n    // constructor(@Inject(ChangeDetectorRef) private changeDetector: ChangeDetectorRef) {}\n\n    protected getRootDomNode() {\n        const node = document.getElementById(this.rootDomID);\n        invariant(node, `Node '${this.rootDomID} not found!`);\n        return node;\n    }\n\n    protected getProps(): MindProps {\n        const {\n            roots,\n        } = this.data;\n        return {\n            roots,\n        };\n    }\n\n    private isMounted(): boolean {\n        return !!this.rootDomID;\n    }\n\n    //<GGEditor>\n    //   <Mind style={{ width: 500, height: 500 }} data={data} />\n    //</GGEditor>\n\n    protected render() {\n        if (this.isMounted()) {\n            const mind = React.createElement(Mind, { data: this.getProps(), style: { ...this.style } });\n            ReactDOM.render(React.createElement(GGEditor, {}, mind), this.getRootDomNode());\n        }\n    }\n\n    ngOnInit() {\n        this.rootDomID = uuid.v1();\n    }\n\n    ngOnChanges() {\n        this.render();\n    }\n\n    ngAfterViewInit() {\n        this.render();\n    }\n\n\n    ngOnDestroy() {\n    }\n\n    ngAfterContentInit() {\n        // e.on('message', message => {\n        //   this.message = message.text\n        //   this.changeDetector.detectChanges()\n        //   this.returnMessageToReactWhenReceived()\n        // })\n    }\n\n    returnMessageToReactWhenReceived() {\n        // e.emit('received', { text: 'Woohoo! Hello from Angular! ð' })\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlowEditorComponent } from './flow.component';\nimport { MindEditorComponent } from './mind.component';\n\n@NgModule({\n    imports: [CommonModule],\n    declarations: [FlowEditorComponent, MindEditorComponent],\n    exports: [FlowEditorComponent, MindEditorComponent]\n})\nexport class PixelmonGGEditorModule { }\n"],"names":["React.createElement","ReactDOM.render","uuid.v1","invariant"],"mappings":"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"}