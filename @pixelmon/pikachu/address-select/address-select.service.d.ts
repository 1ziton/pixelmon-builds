import { ReplaySubject, Subject } from 'rxjs';
import { AddressQueryService, AddrOption, ResultOption } from './interface';
export declare class AddressSelectService {
    private addrQuerySrv;
    autoClearSearchValue: boolean;
    serverSearch: boolean;
    filterOption: any;
    disabled: boolean;
    levelLabels: AddrOption[];
    currentLevel: number;
    maxLevel: number;
    separator: string;
    private listOfSelectedValueWithEmit$;
    private searchValueRaw$;
    private listOfFilteredOption;
    private openRaw$;
    private checkRaw$;
    clearInput$: Subject<boolean>;
    searchValue: string;
    isShowNotFound: boolean;
    open$: import("rxjs").Observable<boolean>;
    listOfActivatedOption: any[];
    listOfActivatedOption$: ReplaySubject<AddrOption | null>;
    selectedOption: ResultOption;
    modelChange$: import("rxjs").Observable<any[] | null>;
    searchValue$: import("rxjs").Observable<string>;
    listOfProvinceOptions: AddrOption[];
    listOfCityOptions: AddrOption[];
    listOfDistinctOptions: AddrOption[];
    listOfStreetOptions: AddrOption[];
    check$: import("rxjs").Observable<unknown>;
    compareWith: (o1: any, o2: any) => boolean;
    constructor(addrQuerySrv: AddressQueryService);
    getListByCode(code?: string, level?: number): void;
    toggleTab(index: number): void;
    isMaxLevel(): boolean;
    clickOption(option: AddrOption): void;
    updateSelectedOption(clean?: boolean): void;
    updateListOfFilteredOption(): void;
    clearInput(): void;
    updateListOfSelectedValue(value: any[], emit: boolean): void;
    updateActivatedOption(option: AddrOption | null, level: number): void;
    includesSeparators(str: string | string[], separators: string[]): boolean;
    resetActivatedOptionIfNeeded(): void;
    updateSearchValue(value: string): void;
    updateSelectedOptionByCode(code: string): void;
    removeValueFormSelected(option: AddrOption): void;
    setOpenState(value: boolean): void;
    check(): void;
}
