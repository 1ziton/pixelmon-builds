{"version":3,"sources":["ng://@pixelmon/pikachu/viewer/viewer.directive.ts"],"names":["ViewerImgDirective","_elementRef","this","lazyLoadSrc","thumbnailSrc","nativeElement","prototype","ngOnInit","src","dataset","Directive","args","selector","ElementRef","Input","ViewerDirective","viewer","isLazyLoad","maxShowNum","Infinity","ngAfterContentInit","_this","initViewer","_subscription","viewerImgs","changes","subscribe","setTimeout","ngOnDestroy","unsubscribe","imgElements","destroy","Viewer","ready","images","index","length","element","hidden","ContentChildren","descendants","ViewerDirectiveModule","NgModule","declarations","exports"],"mappings":"2XAmBE,SAAAA,EAAoBC,GAAAC,KAAAD,YAAAA,EAJXC,KAAAC,YAAc,GACdD,KAAAE,aAAe,4BAItBF,KAAKG,cAAgBH,KAAKD,YAAYI,cAU1C,OAPEL,EAAAM,UAAAC,SAAA,WAEML,KAAKC,cACPD,KAAKG,cAAcG,IAAMN,KAAKE,aAC9BF,KAAKG,cAAcI,QAAQN,YAAcD,KAAKC,kCAhBnDO,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,2DAN2EC,EAAAA,mDASpFC,EAAAA,4BACAA,EAAAA,SAcHd,kBAaE,SAAAe,EAAoBd,GAAAC,KAAAD,YAAAA,EAPpBC,KAAAc,OAAc,KAGLd,KAAAe,YAAa,EACbf,KAAAgB,WAAaC,EAAAA,EAoDxB,OA/CEJ,EAAAT,UAAAc,mBAAA,WAAA,IAAAC,EAAAnB,KACEA,KAAKoB,aAELpB,KAAKqB,cAAgBrB,KAAKsB,WAAWC,QAAQC,UAAS,WAEpDC,WAAU,WACRN,EAAKC,kBAKXP,EAAAT,UAAAsB,YAAA,WACM1B,KAAKqB,eACPrB,KAAKqB,cAAcM,eAIvBd,EAAAT,UAAAgB,WAAA,WAAA,IACMQ,EADNT,EAAAnB,KAGMA,KAAKc,QACPd,KAAKc,OAAOe,UAEd7B,KAAKc,OAAS,IAAIgB,OAAO9B,KAAKD,YAAYI,cAAe,CACvD4B,MAAK,WAIH,GAHAH,EAAcT,EAAKL,OAAOkB,QAAU,GAGhCb,EAAKJ,WAEP,IAAK,IAAIkB,EAAQ,EAAGA,EAAQL,EAAYM,OAAQD,IAAS,KACjDE,EAAUP,EAAYK,GAC5BE,EAAQ7B,IAAM6B,EAAQ5B,QAAmB,gBAOjDqB,EAAc5B,KAAKc,OAAOkB,QAAU,GAGpC,IAAK,IAAIC,EAAQjC,KAAKgB,WAAYiB,EAAQL,EAAYM,OAAQD,IAAS,CACrDL,EAAYK,GACpBG,QAAS,wBAzDtB5B,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,wDA3B2EC,EAAAA,kDAiCpFC,EAAAA,0BACAA,EAAAA,0BACAyB,EAAAA,gBAAe5B,KAAA,CAACX,EAAoB,CAAEwC,aAAa,OAmDtDzB,kBAEA,SAAA0B,KAIoC,2BAJnCC,EAAAA,SAAQ/B,KAAA,CAAC,CACRgC,aAAc,CAAC5B,EAAiBf,GAChC4C,QAAS,CAAC7B,EAAiBf,OAEOyC","sourcesContent":["/**\n * @Description: åºäºviewerå°è£\n * @Author: zomixi\n * @Date: 2019-07-09 16:56:59\n */\n\nimport { NgModule, Directive, AfterContentInit, OnDestroy, ContentChildren, QueryList, ElementRef, Input, OnInit } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\ndeclare var Viewer;\n\n@Directive({\n  selector: '[viewerImg]',\n})\nexport class ViewerImgDirective implements OnInit {\n  @Input() lazyLoadSrc = ''; // æå è½½å¾çurl\n  @Input() thumbnailSrc = '/assets/img/thumbnail.png'; // æå è½½ç¼©ç¥å¾url\n  nativeElement: HTMLImageElement; // HTMLImageElementå®ä¾\n\n  constructor(private _elementRef: ElementRef<HTMLImageElement>) {\n    this.nativeElement = this._elementRef.nativeElement;\n  }\n\n  ngOnInit() {\n    // æå è½½æ¶èµå¼url\n    if (this.lazyLoadSrc) {\n      this.nativeElement.src = this.thumbnailSrc;\n      this.nativeElement.dataset.lazyLoadSrc = this.lazyLoadSrc;\n    }\n  }\n}\n\n@Directive({\n  selector: '[viewer]',\n})\nexport class ViewerDirective implements AfterContentInit, OnDestroy {\n  viewer: any = null; // viewerå®ä¾\n  private _subscription: Subscription; // ç¨äºunsubscribe\n\n  @Input() isLazyLoad = false; // æ¯å¦æå è½½å¾ç\n  @Input() maxShowNum = Infinity; // æå¤§æ¾ç¤ºæ°é\n  @ContentChildren(ViewerImgDirective, { descendants: true }) viewerImgs: QueryList<ViewerImgDirective>; // å½viewerImgsæ¹åæ¶èªå¨æ´æ°viewer\n\n  constructor(private _elementRef: ElementRef) {}\n\n  ngAfterContentInit() {\n    this.initViewer();\n\n    this._subscription = this.viewerImgs.changes.subscribe(() => {\n      // ç­å¾DOMæ´æ°\n      setTimeout(() => {\n        this.initViewer();\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n  }\n\n  initViewer() {\n    let imgElements: HTMLCollection;\n    // å ä¸ºreadyäºä»¶åªä¼æ§è¡ä¸éï¼æéç¨destroyånewçæ¹æ³ï¼updateæ¹æ³ä¸éç¨\n    if (this.viewer) {\n      this.viewer.destroy();\n    }\n    this.viewer = new Viewer(this._elementRef.nativeElement, {\n      ready: () => {\n        imgElements = this.viewer.images || [];\n\n        // ç»srcèµå¼æå è½½url\n        if (this.isLazyLoad) {\n          // tslint:disable-next-line: prefer-for-of\n          for (let index = 0; index < imgElements.length; index++) {\n            const element = imgElements[index] as HTMLImageElement;\n            element.src = element.dataset.lazyLoadSrc as string;\n          }\n        }\n      },\n    });\n\n    // vieweråå§ååææviewer.images\n    imgElements = this.viewer.images || [];\n\n    // è¶è¿æå¤§æ°éçä¸æ¾ç¤º\n    for (let index = this.maxShowNum; index < imgElements.length; index++) {\n      const element = imgElements[index] as HTMLImageElement;\n      element.hidden = true;\n    }\n  }\n}\n\n@NgModule({\n  declarations: [ViewerDirective, ViewerImgDirective],\n  exports: [ViewerDirective, ViewerImgDirective],\n})\nexport class ViewerDirectiveModule {}\n"]}