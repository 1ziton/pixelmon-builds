import { ReplaySubject, Subject } from 'rxjs';
import { POption } from './interface';
export declare class DropdownPanelService {
    autoClearSearchValue: boolean;
    serverSearch: boolean;
    filterOption: any;
    mode: string;
    maxMultipleCount: number;
    disabled: boolean;
    private listOfSelectedValueWithEmit$;
    private mapOfTemplateOption$;
    private searchValueRaw$;
    private listOfFilteredOption;
    private openRaw$;
    private checkRaw$;
    private open;
    clearInput$: Subject<boolean>;
    searchValue: string;
    isShowNotFound: boolean;
    open$: import("rxjs").Observable<boolean>;
    activatedOption: POption | null;
    activatedOption$: ReplaySubject<POption | null>;
    listOfSelectedValue$: import("rxjs").Observable<any[]>;
    modelChange$: import("rxjs").Observable<any[] | null>;
    searchValue$: import("rxjs").Observable<string>;
    listOfSelectedValue: any[];
    listOfPOption: POption[];
    listOfCachedSelectedOption: POption[];
    valueOrOption$: import("rxjs").Observable<[any[], {
        listOfPOption: POption[];
    }]>;
    check$: import("rxjs").Observable<unknown>;
    compareWith: (o1: any, o2: any) => boolean;
    clickOption(option: POption): void;
    updateListOfCachedOption(): void;
    updateListOfFilteredOption(): void;
    clearInput(): void;
    updateListOfSelectedValue(value: any[], emit: boolean): void;
    updateActivatedOption(option: POption | null): void;
    includesSeparators(str: string | string[], separators: string[]): boolean;
    splitBySeparators(str: string | string[], separators: string[]): string[];
    resetActivatedOptionIfNeeded(): void;
    updateTemplateOption(listOfPOption: POption[]): void;
    updateSearchValue(value: string): void;
    updateSelectedValueByLabelList(listOfLabel: string[]): void;
    onKeyDown(e: KeyboardEvent): void;
    removeValueFormSelected(option: POption): void;
    setOpenState(value: boolean): void;
    check(): void;
    readonly isSingleMode: boolean;
}
